<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!--DOCTYPE MAN SYSTEM "../../manrev.dtd"-->
<?xml-stylesheet type="text/xsl" href="scilab_rev.xsl"?>
<MAN>
  <LANGUAGE>eng</LANGUAGE>
  <TITLE> forvard  </TITLE>
  <TYPE>Scilab Function  </TYPE>
  <DATE> May, 2006 </DATE>
  <SHORT_DESCRIPTION name="forvard"> propagates the field using FFT algorithm. </SHORT_DESCRIPTION>
  <CALLING_SEQUENCE>
  <CALLING_SEQUENCE_ITEM>[field_out]=forvard(field_in,z)  </CALLING_SEQUENCE_ITEM>
  </CALLING_SEQUENCE>
  <PARAM>
 <PARAM_INDENT>
  <PARAM_ITEM>
  <PARAM_NAME>field_in  </PARAM_NAME>
  <PARAM_DESCRIPTION>
          <SP>:input field. it must be diffractive wavefront. </SP>
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>z </PARAM_NAME>
  <PARAM_DESCRIPTION>
          <SP>: the propagating distance in meters. </SP>
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
  <PARAM_ITEM>
  <PARAM_NAME>field_out  </PARAM_NAME>
  <PARAM_DESCRIPTION>
          <SP>: the output field or diffractive wavefront. </SP>
  </PARAM_DESCRIPTION> 
  </PARAM_ITEM>
 </PARAM_INDENT>
  </PARAM>
  <DESCRIPTION>
  <P>
	Let us consider the wave function U in two planes: U(x,y,0) and U(x,y,z). 
	Suppose that U(x,y,z) is the result of propagation of U(x,y,0) to the distance z.
	In the Fresnel approximation, the Fourier transform of the diffracted wave 
	function is related to the Fourier transform of the initial function via the frequency 
	transfer characteristic of the free space, given by:
  </P>
  <IMG src="forvard_1.gif"/>
  <P>
	correspondently,the Fourier transforms of two (initial and propagated ) wave functions 
	can be	given by:
  </P>
  <IMG src="forvard_2.gif"/>
  <P>and</P>
  <IMG src="forvard_3.gif"/>
  <P>
	the expressions (1, 2, 3) provide a symmetrical relation between the initial and 
	diffracted wave functions in the Fresnel approximation.	Applied them in the order
	(2)->(1)->(3) result in the diffracted wave function, while being applied in the 
	reversed order they allow for reconstruction of the initial wave function from 
	the result of diffraction. 
  </P>
  <P>
	The described algorithm can be implemented numerically using Fast Fourier Transform
	(FFT) on a finite rectangular grid with periodic border conditions. It results in 
	a model of beam propagation inside a rectangular waveguide with reflective walls. 
	To approximate a free-space propagation, wide empty guard bands have to be formed 
	around the wave function defined on a grid. To eliminate the influence of the finite
	rectangular data window, Gaussian amplitude windowing in the frequency domain should
	be applied.  
  </P>
  <P>
	The algorithm is very fast in comparison with direct calculation of diffraction 
	integrals. Features to be taken into account: 
  </P>
  <P>
	(1) The algorithm realizes a model 
	of light beam propagation inside a square waveguide with reflecting walls 
	positioned at the grid edges. To approximate a free space propagation,
	the intensity near the walls must be negligible small. Thus the grid edges must 
	be far enough from the propagating beam. Neglecting these conditions will cause 
	interference of the propagating beam with waves reflected from the waveguide 
	walls. 
  </P>
  <P>
	(2) As a consequence of the previous feature, we must be extremely careful
	propagating the plane wave to a distance comparable with D*D/lamda where D is 
	diameter (or a characteristic size) of the beam, and lamda is the wavelength.
	To propagate the beam to the far field (or just far enough) we have to choose 
	the size of our grid much larger than the beam itself, in other words we define
	the field in a grid filled mainly with zeros. The grid must be even larger when 
	the beam is aberrated - the divergent beams sooner reach the region border. 
  </P>
  <P>
	(3)Described FFT algorithm has its drawbacks. The positive message is that it 
	is very fast, works pretty well if properly used, is simple in implementation 
	and does not require any allocation of extra memory. 
  </P>
  <P>
	(4)negative distance argument
	may be supplied to forvard. It means that the program will perform ''propagation 
	back'' or in other words it will reconstruct the initial field from the one 
	diffracted. 
  </P>
  </DESCRIPTION>
  <EXAMPLE><![CDATA[
	f1=begin(0.02,1e-6);
	f2=circ_ap(f1,0.005);
	f3=forvard(f2,1);
	field_plot(f3);
	
	cros_out(f3,"file1");	
	temp = fscanfMat('file1.txt');
	x=zeros(1,256);int_x=zeros(1,256);
	x(:)=temp(:,1);int_x(:)=temp(:,2);
	plot2d(x,int_x);	
 ]]></EXAMPLE>
  <AUTHOR> 
    <AUTHORS_ITEM>  Chen jingyuan,  </AUTHORS_ITEM>
    <AUTHORS_ITEM>  Gan guangyong (IAPCM, Beijing,China.)  </AUTHORS_ITEM>
  </AUTHOR>
  <SEE_ALSO>
    <SEE_ALSO_ITEM> <LINK PATH="./">fresnel</LINK> </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM> <LINK PATH="./">forward</LINK> </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM> <LINK PATH="./">steps</LINK> </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM> <LINK PATH="./">lens_forvard</LINK> </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM> <LINK PATH="./">geom_propagation</LINK> </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM> <LINK PATH="./">near_angular</LINK> </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM> <LINK PATH="./">near_fresnel</LINK> </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM> <LINK PATH="./">far_fresnel</LINK> </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM> <LINK PATH="./">fraunhoffer_grt</LINK> </SEE_ALSO_ITEM>    
    <SEE_ALSO_ITEM> <LINK PATH="./">fresnel_grt</LINK> </SEE_ALSO_ITEM>
    <SEE_ALSO_ITEM><LINK PATH="../optics_scicos/">propagate</LINK></SEE_ALSO_ITEM>
  </SEE_ALSO>
</MAN>
